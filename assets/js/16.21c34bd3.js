(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{605:function(t,s,a){"use strict";a.r(s);var e=a(17),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"一、fiber-架构诞生"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、fiber-架构诞生"}},[t._v("#")]),t._v(" 一、Fiber 架构诞生")]),t._v(" "),a("ul",[a("li",[t._v("当项目变得庞大、组件数量繁多、遇到大计算量的操作或者设备性能不足使得页面掉帧，导致卡顿。")])]),t._v(" "),a("h3",{attrs:{id:"react-渲染页面的两个阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-渲染页面的两个阶段"}},[t._v("#")]),t._v(" React 渲染页面的两个阶段")]),t._v(" "),a("ul",[a("li",[t._v("调度阶段（"),a("code",[t._v("reconciliation")]),t._v("）：在这个阶段 "),a("code",[t._v("React")]),t._v(" 会更新数据生成新的 "),a("code",[t._v("Virtual DOM")]),t._v("，然后通过"),a("strong",[t._v("Diff")]),t._v("算法，快速找出需要更新的元素，放到更新队列中去，得到新的更新队列。")]),t._v(" "),a("li",[t._v("渲染阶段（"),a("code",[t._v("commit")]),t._v("）：这个阶段 "),a("code",[t._v("React")]),t._v(" 会遍历更新队列，将其所有的变更一次性更新到 "),a("code",[t._v("DOM")]),t._v(" 上。")])]),t._v(" "),a("h3",{attrs:{id:"react-15-架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-15-架构"}},[t._v("#")]),t._v(" React 15 架构")]),t._v(" "),a("p",[a("strong",[t._v("React15架构可以分为两层")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Reconciler")]),t._v("（协调器）—— 负责找出变化的组件；")]),t._v(" "),a("li",[a("strong",[t._v("Renderer")]),t._v("（渲染器）—— 负责将变化的组件渲染到页面上；")])]),t._v(" "),a("p",[t._v("在React15及以前，"),a("code",[t._v("Reconciler")]),t._v(" 采用递归的方式创建"),a("strong",[t._v("虚拟DOM")]),t._v("，递归过程是不能中断的。如果组件树的层级很深，递归会占用线程很多时间，递归更新时间超过了 "),a("code",[t._v("16ms")]),t._v("，用户交互就会卡顿。\n  为了解决这个问题，"),a("code",[t._v("React16")]),t._v(" 将递归的无法中断的更新重构为异步的可中断更新，由于曾经用于递归的"),a("strong",[t._v("虚拟DOM")]),t._v("数据结构已经无法满足需要。于是，全新的 "),a("code",[t._v("Fiber")]),t._v(" 架构应运而生。")]),t._v(" "),a("h3",{attrs:{id:"react-16-架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-16-架构"}},[t._v("#")]),t._v(" React 16 架构")]),t._v(" "),a("p",[t._v("为了解决同步更新长时间占用线程导致页面卡顿的问题，也为了探索运行时优化的更多可能，React开始重构并一直持续至今。重构的目标是实现 "),a("code",[t._v("Concurrent Mode")]),t._v("（"),a("strong",[t._v("并发模式")]),t._v("）。")]),t._v(" "),a("p",[t._v("从 "),a("code",[t._v("v15")]),t._v(" 到 "),a("code",[t._v("v16")]),t._v("，React团队花了两年时间将源码架构中的 "),a("code",[t._v("Stack Reconciler")]),t._v(" 重构为 "),a("code",[t._v("Fiber Reconciler")]),t._v("。\nReact16架构可以分为三层：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Scheduler")]),t._v("（调度器）—— 调度任务的优先级，高优任务优先进入 "),a("code",[t._v("Reconciler")]),t._v("；")]),t._v(" "),a("li",[a("strong",[t._v("Reconciler")]),t._v("（协调器）—— 负责找出变化的组件：更新工作从递归变成了可以中断的循环过程。"),a("code",[t._v("Reconciler")]),t._v(" 内部采用了 "),a("code",[t._v("Fiber")]),t._v(" 的架构；")]),t._v(" "),a("li",[a("strong",[t._v("Renderer")]),t._v("（渲染器）—— 负责将变化的组件渲染到页面上。")])]),t._v(" "),a("h3",{attrs:{id:"react-17-优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-17-优化"}},[t._v("#")]),t._v(" React 17 优化")]),t._v(" "),a("p",[a("code",[t._v("React16")]),t._v("的 "),a("code",[t._v("expirationTimes")]),t._v(" 模型只能区分是否 "),a("code",[t._v(">=expirationTimes")]),t._v(" 决定节点是否更新。"),a("code",[t._v("React17")]),t._v(" 的 "),a("code",[t._v("lanes")]),t._v(" 模型可以选定一个更新区间，并且动态的向区间中增减优先级，可以处理更细粒度的更新。")]),t._v(" "),a("blockquote",[a("p",[t._v("Lane用"),a("strong",[t._v("二进制位")]),t._v("表示任务的优先级，方便优先级的计算（位运算），不同优先级占用不同位置的“赛道”，而且存在批的概念，优先级越低，“赛道”越多。高优先级打断低优先级，新建的任务需要赋予什么优先级等问题都是Lane所要解决的问题。\\")])]),t._v(" "),a("p",[a("strong",[t._v("Concurrent Mode的目的是实现一套可中断/恢复的更新机制。其由两部分组成：")])]),t._v(" "),a("ul",[a("li",[t._v("一套协程架构："),a("code",[t._v("Fiber Reconciler")])]),t._v(" "),a("li",[t._v("基于协程架构的启发式更新算法：控制协程架构工作方式的算法")])]),t._v(" "),a("h2",{attrs:{id:"二、fiber-架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、fiber-架构"}},[t._v("#")]),t._v(" 二、Fiber 架构")]),t._v(" "),a("p",[a("code",[t._v("Fiber")]),t._v(" 的英文含义是“纤维”，它是比线程（"),a("code",[t._v("Thread")]),t._v("）更细的线，比线程（"),a("code",[t._v("Thread")]),t._v("）控制得更精密的执行模型。在广义计算机科学概念中，Fiber 又是一种协作的（"),a("code",[t._v("Cooperative")]),t._v("）编程模型（"),a("strong",[t._v("协程")]),t._v("），帮助开发者用一种**【既模块化又协作化】**的方式来编排代码。")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("React")]),t._v(" 中，"),a("code",[t._v("Fiber")]),t._v(" 就是 "),a("code",[t._v("React 16")]),t._v(" 实现的一套新的更新机制，让 "),a("code",[t._v("React")]),t._v(" 的"),a("strong",[t._v("更新过程变得可控")]),t._v("，避免了之前采用递归需要一气呵成影响性能的做法")]),t._v(" "),a("h3",{attrs:{id:"react-fiber-时间分片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-fiber-时间分片"}},[t._v("#")]),t._v(" React Fiber 时间分片")]),t._v(" "),a("p",[t._v("把一个"),a("strong",[t._v("耗时长的任务分成很多小片")]),t._v("，每一个小片的运行时间很短，虽然总时间依然很长，但是在每个小片执行完之后，都"),a("strong",[t._v("给其他任务一个执行的机会")]),t._v("，这样唯一的线程就不会被独占，其他任务依然有运行的机会。")]),t._v(" "),a("p",[a("code",[t._v("React Fiber")]),t._v(" 把更新过程"),a("strong",[t._v("碎片化")]),t._v("，每执行完一段更新过程，就把控制权交还给 "),a("code",[t._v("React")]),t._v(" 负责任务协调的模块，看看有没有其他紧急任务要做，如果没有就继续去更新，如果有紧急任务，那就去做紧急任务。")]),t._v(" "),a("h3",{attrs:{id:"react-15-的-stack-reconciler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-15-的-stack-reconciler"}},[t._v("#")]),t._v(" React 15 的 Stack Reconciler")]),t._v(" "),a("p",[t._v("基于"),a("strong",[t._v("栈")]),t._v("的 "),a("code",[t._v("Reconciler")]),t._v("，浏览器引擎会从执行栈的顶端开始执行，执行完毕就弹出当前执行上下文，开始执行下一个函数，"),a("strong",[t._v("直到执行栈被清空才会停止")]),t._v("。然后将执行权交还给浏览器。由于 React 将页面视图视作一个个函数执行的结果。每一个页面往往由多个视图组成，这就意味着多个函数的调用。")]),t._v(" "),a("p",[t._v('如果一个页面足够复杂，形成的函数调用栈就会很深。每一次更新，执行栈需要一次性执行完成，中途不能干其他的事儿，只能"'),a("strong",[t._v("一心一意")]),t._v('"。结合前面提到的浏览器刷新率，JS 一直执行，浏览器得不到控制权，就不能及时开始下一帧的绘制。如果这个时间超过\n'),a("code",[t._v("16ms")]),t._v("，当页面有动画效果需求时，动画因为浏览器"),a("strong",[t._v("不能及时绘制下一帧")]),t._v("，这时动画就会出现卡顿。不仅如此，因为事件响应代码是在每一帧开始的时候执行，如果不能及时绘制下一帧，事件响应也会延迟。")]),t._v(" "),a("h3",{attrs:{id:"react-16-的-fiber-reconciler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-16-的-fiber-reconciler"}},[t._v("#")]),t._v(" React 16 的 Fiber Reconciler")]),t._v(" "),a("p",[a("strong",[t._v("链表结构")]),t._v("\n在 "),a("code",[t._v("React Fiber")]),t._v(" 中用"),a("strong",[t._v("链表")]),t._v("遍历的方式替代了 "),a("code",[t._v("React 16")]),t._v(" 之前的栈递归方案。在 "),a("code",[t._v("React 16")]),t._v(" 中使用了大量的"),a("strong",[t._v("链表")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("使用多向链表的形式替代了原来的树结构")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B1"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C1"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B2"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B2")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"/157614057-0c85af9d-ad97-4090-8fe0-ee031c5c2997.png",alt:"image"}})]),t._v(" "),a("blockquote",[a("p",[t._v("副作用单链表")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/157614111-be7bb520-dd8f-4621-951e-7875961f6a48.png",alt:"image"}})]),t._v(" "),a("blockquote",[a("p",[t._v("状态更新单链表")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/157614149-214aa1a1-7ceb-4d30-bead-b5314c90c634.png",alt:"image"}})]),t._v(" "),a("blockquote",[a("p",[t._v("延伸：链表是一种简单高效的数据结构，它在当前节点中保存着指向下一个节点的指针；遍历的时候，通过操作指针找到下一个元素。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/157614271-904633c8-1b10-4f4b-9c5f-12c53b1233a6.png",alt:"image"}})]),t._v(" "),a("p",[t._v("链表相比顺序结构数据格式的"),a("strong",[t._v("好处")]),t._v("就是：")]),t._v(" "),a("ol",[a("li",[t._v("操作更高效，比如顺序调整、删除，只需要改变节点的指针指向就好了。")]),t._v(" "),a("li",[t._v("不仅可以根据当前节点找到下一个节点，在多向链表中，还可以找到他的父节点或者兄弟节点。")])]),t._v(" "),a("p",[t._v("但链表也不是完美的，"),a("strong",[t._v("缺点")]),t._v("就是：")]),t._v(" "),a("ol",[a("li",[t._v("比顺序结构数据更占用空间，因为每个节点对象还保存有指向下一个对象的指针。")]),t._v(" "),a("li",[t._v("不能自由读取，必须找到他的上一个节点。")])]),t._v(" "),a("p",[t._v("React 用"),a("strong",[t._v("空间换时间")]),t._v("，更高效的操作可以方便根据优先级进行操作。同时"),a("strong",[t._v("可以根据当前节点找到其他节点，在下面提到的挂起和恢复过程中起到了关键作用")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"三、react-fiber-如何实现更新过程可控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、react-fiber-如何实现更新过程可控"}},[t._v("#")]),t._v(" 三、React Fiber 如何实现更新过程可控")]),t._v(" "),a("p",[t._v("更新过程的可控主要体现在下面几个方面：")]),t._v(" "),a("ul",[a("li",[t._v("任务拆分")]),t._v(" "),a("li",[t._v("任务挂起、恢复、终止")]),t._v(" "),a("li",[t._v("任务具备优先级")])]),t._v(" "),a("h3",{attrs:{id:"任务拆分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任务拆分"}},[t._v("#")]),t._v(" 任务拆分")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("React Fiber")]),t._v(' 机制中，它采用"化整为零"的思想，将调和阶段（Reconciler）递归遍历 VDOM 这个大任务分成若干小任务，每个任务只负责一个节点的处理。')]),t._v(" "),a("h3",{attrs:{id:"任务挂起、恢复、终止"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任务挂起、恢复、终止"}},[t._v("#")]),t._v(" 任务挂起、恢复、终止")]),t._v(" "),a("blockquote",[a("p",[t._v("workInProgress tree")])]),t._v(" "),a("p",[a("code",[t._v("workInProgress")]),t._v(" 代表"),a("strong",[t._v("当前正在执行更新的 "),a("code",[t._v("Fiber")]),t._v(" 树")]),t._v("。在 "),a("code",[t._v("render")]),t._v(" 或者 "),a("code",[t._v("setState")]),t._v(" 后，会构建一颗 "),a("code",[t._v("Fiber")]),t._v(" 树，也就是 "),a("code",[t._v("workInProgress tree")]),t._v("，这棵树在构建每一个节点的时候会"),a("strong",[t._v("收集当前节点的副作用")]),t._v("，整棵树构建完成后，会形成一条完整的"),a("strong",[t._v("副作用链")]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("currentFiber tree")])]),t._v(" "),a("p",[a("code",[t._v("currentFiber")]),t._v(" 表示"),a("strong",[t._v("上次渲染构建的 "),a("code",[t._v("Filber")]),t._v(" 树")]),t._v("。**在每一次更新完成后 "),a("code",[t._v("workInProgress")]),t._v(" 会赋值给 "),a("code",[t._v("currentFiber")]),t._v(" **。在新一轮更新时 "),a("code",[t._v("workInProgress tree")]),t._v(" 再重新构建，新 "),a("code",[t._v("workInProgress")]),t._v(" 的节点通过 "),a("code",[t._v("alternate")]),t._v(" 属性和 "),a("code",[t._v("currentFiber")]),t._v(" 的节点建立联系。")]),t._v(" "),a("p",[t._v("在新 "),a("code",[t._v("workInProgress tree")]),t._v(" 的创建过程中，会同 "),a("code",[t._v("currentFiber")]),t._v(" 的对应节点进行 "),a("code",[t._v("Diff")]),t._v(" 比较，收集副作用。同时也会"),a("strong",[t._v("复用")]),t._v("和 "),a("code",[t._v("currentFiber")]),t._v(" 对应的节点对象，减少新创建对象带来的开销。也就是说"),a("strong",[t._v("无论是创建还是更新、挂起、恢复以及终止操作都是发生在 "),a("code",[t._v("workInProgress tree")]),t._v(" 创建过程中的")]),t._v("。"),a("code",[t._v("workInProgress tree")]),t._v(" 构建过程其实就是循环的执行任务和创建下一个任务。")]),t._v(" "),a("h4",{attrs:{id:"挂起"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#挂起"}},[t._v("#")]),t._v(" 挂起")]),t._v(" "),a("p",[t._v("当第一个小任务完成后，先判断这一帧是否还有"),a("strong",[t._v("空闲时间")]),t._v("，没有就挂起下一个任务的执行，"),a("strong",[t._v("记住")]),t._v("当前挂起的节点，让出控制权给浏览器执行更高优先级的任务。")]),t._v(" "),a("h4",{attrs:{id:"恢复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#恢复"}},[t._v("#")]),t._v(" 恢复")]),t._v(" "),a("p",[t._v("在浏览器渲染完一帧后，判断当前帧是否有"),a("strong",[t._v("剩余时间")]),t._v("，如果有就恢复执行之前挂起的任务。如果没有任务需要处理，代表调和阶段完成，可以开始进入渲染阶段。")]),t._v(" "),a("ol",[a("li",[t._v("如何判断一帧是否有空闲时间的呢？")])]),t._v(" "),a("p",[t._v("使用前面提到的 "),a("code",[t._v("RIC (RequestIdleCallback)")]),t._v(" 浏览器原生 "),a("code",[t._v("API")]),t._v("，"),a("code",[t._v("React")]),t._v(" 源码中为了兼容低版本的浏览器，对该方法进行了 "),a("code",[t._v("Polyfill")]),t._v("。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("恢复执行的时候又是如何知道下一个任务是什么呢？")])]),t._v(" "),a("p",[t._v("答案是在前面提到的"),a("strong",[t._v("链表")]),t._v("。在 "),a("code",[t._v("React Fiber")]),t._v(" 中每个任务其实就是在处理一个 "),a("code",[t._v("FiberNode")]),t._v(" 对象，然后又生成下一个任务需要处理的 "),a("code",[t._v("FiberNode")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"终止"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#终止"}},[t._v("#")]),t._v(" 终止")]),t._v(" "),a("p",[t._v("其实并不是每次更新都会走到提交阶段。当在调和过程中触发了新的更新，在执行下一个任务的时候，判断"),a("strong",[t._v("是否有优先级更高的执行任务")]),t._v("，如果有就终止原来将要执行的任务，开始新的 "),a("code",[t._v("workInProgressFiber")]),t._v(" 树构建过程，开始新的更新流程。这样可以避免重复更新操作。这也是"),a("strong",[t._v("在 "),a("code",[t._v("React 16")]),t._v(" 以后生命周期函数 "),a("code",[t._v("componentWillMount")]),t._v(" 有可能会执行多次")]),t._v("的原因。\n"),a("img",{attrs:{src:"/22131908/157621232-0dad5503-f967-474f-b89d-b469a86bb252.png",alt:"image"}})]),t._v(" "),a("h3",{attrs:{id:"任务具备优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任务具备优先级"}},[t._v("#")]),t._v(" 任务具备优先级")]),t._v(" "),a("p",[a("code",[t._v("React Fiber")]),t._v(" 除了通过挂起，恢复和终止来控制更新外，还给每个任务分配了优先级。具体点就是在创建或者更新 "),a("code",[t._v("FiberNode")]),t._v(" 的时候，通过算法给每个任务分配一个到期时间（"),a("code",[t._v("expirationTime")]),t._v("）。在每个任务执行的时候除了判断剩余时间，如果当前处理节点已经过期，那么无论现在是否有空闲时间都必须执行该任务。"),a("strong",[t._v("过期时间的大小还代表着任务的优先级")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("任务在执行过程中顺便收集了每个 "),a("code",[t._v("FiberNode")]),t._v(" 的副作用")]),t._v("，将有副作用的节点通过 "),a("code",[t._v("firstEffect")]),t._v("、"),a("code",[t._v("lastEffect")]),t._v("、"),a("code",[t._v("nextEffect")]),t._v(" 形成一条副作用单链表 "),a("code",[t._v("A1(TEXT)-B1(TEXT)-C1(TEXT)-C1-C2(TEXT)-C2-B1-B2(TEXT)-B2-A")]),t._v("。")]),t._v(" "),a("p",[t._v("其实"),a("strong",[t._v("最终都是为了收集到这条副作用链表，有了它，在接下来的渲染阶段就通过遍历副作用链完成 "),a("code",[t._v("DOM")]),t._v(" 更新")]),t._v("。这里需要注意，更新真实 "),a("code",[t._v("DOM")]),t._v(" 的这个动作是"),a("strong",[t._v("一气呵成")]),t._v("的，不能中断，不然会造成视觉上的不连贯（"),a("code",[t._v("commit")]),t._v("）。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A1"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B1"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C1"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C2"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B2"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B2")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"/157621660-db4cf254-01f0-4584-b0e9-05887940fa0c.png",alt:"image"}})]),t._v(" "),a("h2",{attrs:{id:"四、fiber结构长什么样"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、fiber结构长什么样"}},[t._v("#")]),t._v(" 四、Fiber结构长什么样")]),t._v(" "),a("p",[t._v("基于时间分片的增量更新需要"),a("strong",[t._v("更多的上下文信息")]),t._v("，之前的 "),a("code",[t._v("vDOM tree")]),t._v(" 显然难以满足，所以扩展出了 "),a("code",[t._v("fiber tree")]),t._v("（即 "),a("code",[t._v("Fiber")]),t._v("上下文的 "),a("code",[t._v("vDOM tree")]),t._v(" ），更新过程就是根据输入数据以及现有的 "),a("code",[t._v("fiber tree")]),t._v(" 构造出新的 "),a("code",[t._v("fiber tree")]),t._v(" （ "),a("code",[t._v("workInProgress tree")]),t._v(" ）。")]),t._v(" "),a("p",[a("code",[t._v("FiberNode")]),t._v(" 上的属性有很多，根据笔者的理解，以下这么几个属性是值得关注的："),a("code",[t._v("return")]),t._v("、"),a("code",[t._v("child")]),t._v("、"),a("code",[t._v("sibling")]),t._v("（主要负责 "),a("code",[t._v("fiber")]),t._v(" 链表的链接）；"),a("code",[t._v("stateNode")]),t._v("；"),a("code",[t._v("effectTag")]),t._v("；"),a("code",[t._v("expirationTime")]),t._v("；"),a("code",[t._v("alternate")]),t._v("；"),a("code",[t._v("nextEffect")]),t._v("。各属性介绍参看下面的 "),a("code",[t._v("class FiberNode")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FiberNode")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pendingProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例属性")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标记不同组件类型，如函数组件、类组件、文本、原生组件...")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// react 元素上的 key 就是 jsx 上写的那个 key ，也就是最终 ReactElement 上的")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elementType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// createElement的第一个参数，ReactElement 上的 type")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示fiber的真实类型 ，elementType 基本一样，在使用了懒加载之类的功能时可能会不一样")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例对象，比如 class 组件 new 完后就挂载在这个属性上面，如果是RootFiber，那么它上面挂的是 FiberRoot,如果是原生节点就是 dom 对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fiber")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父节点，指向上一个 fiber")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子节点，指向自身下面的第一个 fiber")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 兄弟组件, 指向一个兄弟节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  一般如果没有兄弟节点的话是0 当某个父节点下的子节点是数组类型的时候会给每个子节点一个 index，index 和 key 要一起做 diff")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ref "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// reactElement 上的 ref 属性")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pendingProps "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pendingProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新的 props")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedProps "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 旧的 props")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fiber 上的更新队列执行一次 setState 就会往这个属性上挂一个新的更新, 每条更新最终会形成一个链表结构，最后做批量更新")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应  memoizedProps，上次渲染的 state，相当于当前的 state，理解成 prev 和 next 的关系")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示当前组件下的子组件的渲染方式")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// effects")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("effectTag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoEffect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示当前 fiber 要进行何种更新（更新、删除等）")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向下个需要更新的fiber")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向所有子节点里，需要更新的 fiber 里的第一个")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向所有子节点中需要更新的 fiber 的最后一个")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expirationTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoWork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 过期时间，代表任务在未来的哪个时间点应该被完成")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childExpirationTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoWork"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// child 过期时间")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// current 树和 workInprogress 树之间的相互引用")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"/157622436-bb9c2801-e5e6-4086-82e3-828a96128fe1.png",alt:"image"}})]),t._v(" "),a("blockquote",[a("p",[t._v("简单模拟生成以及遍历整个fiber 树过程")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 简化的fiber 节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FiberNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父节点")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 兄弟节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模拟的dom树结构")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" domTree "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div#A'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("children")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text(A1)'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div#B1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("children")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text(B1)'")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div#C1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("children")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text(C1)'")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div#C2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("children")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text(C2)'")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div#B2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("children")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text(B2)'")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生成fiber树")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateFiberTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("domTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" headerNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" curNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    domTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FiberNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("headerNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            headerNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            curNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            curNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("performChildren")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("returnNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" children")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" curChildNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n            children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("child")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" childNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FiberNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                childNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" returnNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                \n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("curChildNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    returnNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" childNode\n                    curChildNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" childNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    curChildNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" childNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    curChildNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" childNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("performChildren")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("performChildren")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" headerNode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fiberTree "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateFiberTree")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("domTree"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 依次遍历节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("currentFiber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有儿子就返回儿子")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" currentFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果没有儿子，则找弟弟")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// completeUnitWork(currentFiber);//将自己的副作用挂到父节点去")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" currentFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有弟弟就返回父节点")]),t._v("\n            currentFiber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFiber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保存当前的fiber节点，下次终端可继续执行")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fiberTree\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前是是否有足够时间执行，这里为了方便，直接遍历")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("执行结果对比")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/157636984-c4d8c93c-b92f-4c39-a232-a43bc09e11ca.png",alt:"image"}})]),t._v(" "),a("blockquote",[a("p",[t._v("分析")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/157636890-18bf3b72-ab12-4380-b999-b40f43e2c750.png",alt:"未命名绘图 drawio"}})])])}),[],!1,null,null,null);s.default=n.exports}}]);